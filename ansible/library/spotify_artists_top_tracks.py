#!/usr/bin/python
# -*- coding: utf8 -*-

ANSIBLE_METADATA = {'metadata_version': '1.1'}
DOCUMENTATION = '''
---
module: spotify_artists_top_tracks
Ansible module for getting top tracks per country for one artist with spotipy
requirements:
  - python >= 2.6
  - spotipy >= 2.4.4
options:
    artists_name:
        description:
          - Artists name to get the related artists for
        required: True
        type: String
    artists_uri:
        description:
          - Artists URI to get top tracks for
        type: String
    artists_file:
        description:
          - JSON File with artists names. JSON File can be a list of artists name or a dict
            see https://developer.spotify.com/web-api/get-related-artists/
        type: String
    country_code:
        description:
          - Country code to get the top tracks from
        Default: AU
        type: String
    dest_file:
        description:
          - Destination file to save the output to
    output_format:
        description:
          - Output format
        Default: short
        type: String
        Choices: short, full
    auth_token:
        description:
          - Authentication token for Spotify API
        required: True
        type: String
'''

EXAMPLES = '''
- name: Get top tracks for an artist in australia and save it to file
  spotify_artits_top_tracks:
    auth_token=0123456789ABCDEFGHI
    artist_name=young the giant
    country_code=au
    dest_file=artists.json
    output_format=short

- name: Get top tracks for an artist in germany
  spotify_artists_top_tracks:
    auth_token=0123456789ABCDEFGHI
    artists_uri=spotify:artist:4j56EQDQu5XnL7R3E9iFJT
    country_code=de
    output_format=long
  register: results

- name: Get top tracks for artists from artists file generated by role get_related_artists
  spotify_artists_top_tracks:
    auth_token=0123456789ABCDEFGHI
    artists_file="/tmp/artists.json"
    output_format=long
  register: results

'''

import sys
import os
import json
from ansible.module_utils.basic import *

try:
    import spotipy
except ImportError as e:
    module.fail_json(msg="Error: Can't import required libraries - " + str(e))

class ArtistsTopTracks:
    def __init__(self, module):
        self.module = module

        self.client = spotipy.Spotify(self.module.params.get("auth_token"))

    def get_artists_uri(self, artists_name = None):
        if artists_name is None:
            artists_name = self.module.params.get("artists_name")

        result = self.client.search(q='artist:' + artists_name, type='artist')

        try:
          artists_uri = result['artists']['items'][0]['uri']
          self.module.params.update(artists_uri=artists_uri)

        except Exception as e:
          self.module.fail_json(msg="Error: Getting URI for artist" + artist_name + " - " + str(e))

    def get_top_tracks_from_file(self):
        artists_file = self.module.params.get("artists_file")
        tracks_dict = {'tracks': []}

        try:
            artists_from_file = json.load(open(artists_file))
        except Exception as e:
          self.module.fail_json(msg="Error: Can't load artists file" + artists_file + " - " + str(e))

        if isinstance(artists_from_file, dict):
            if artists_from_file['artists'][0]['uri']:
                for artist in artists_from_file['artists']:
                    result = self.get_top_tracks(artists_uri = artist['uri'])
                    tracks_dict = self.append_to_dict(result, tracks_dict)
            else:
                self.module.fail_json(msg="Error: Can't read dict in T file. See https://developer.spotify.com/web-api/get-related-artists/ for a correct dict structure." )

        elif isinstance(artists_from_file, list):
            try:
                for artist in artists_from_file:
                    artists_uri = get_artists_uri(artists_name = artist)
                    result = self.get_top_tracks(artists_uri = artists_uri)
                    tracks_dict = self.append_to_dict(result, tracks_dict)
            except Exception as e:
              self.module.fail_json(msg="Error: Can't read list in artists file. List can only contain artists name - " + str(e))
        else:
            self.module.fail_json(msg="Error: Can't file does not type of dict or list.")

        return tracks_dict

    def get_top_tracks(self, artists_uri = None, country_code = None):
        if artists_uri is None:
            artists_uri = self.module.params.get("artists_uri")
        if country_code is None:
            country_code = self.module.params.get("country_code")

        try:
            result = self.client.artist_top_tracks(artists_uri, country_code)
            return result
        except Exception as e:
          self.module.fail_json(msg="Error: Can't get artists top tracks - " + str(e))

    def append_to_dict(self, top_tracks, tracks_dict):
        for artists_top_tracks_list in top_tracks['tracks']:
                if artists_top_tracks_list not in tracks_dict['tracks']:
                    tracks_dict['tracks'].append(artists_top_tracks_list)
        return tracks_dict

    def tracks_to_list(self, track_list):
        artists_name_dict_short = {'tracks': []}
        for track in track_list['tracks']:
          artists_name_dict_short['tracks'].append({'track': track['name'], 'uri': track['uri']})
        return artists_name_dict_short

def main():
    argument_spec = {}
    argument_spec.update(dict(
        auth_token=dict(required=True, type='str'),
        artists_uri=dict(required=False, type='str'),
        artists_name=dict(required=False, type='str'),
        artists_file=dict(required=False, type='str'),
        country_code=dict(default='AU', required=False, type='str'),
        output_format=dict(default='full', choices=['short', 'full'], type='str'),
        dest_file=dict(required=False, type='str')
    ))

    module = AnsibleModule(argument_spec=argument_spec)
    output_format = module.params.get("output_format")

    top_tracks = ArtistsTopTracks(module)

    if  module.params.get("artists_name"):
        top_tracks.get_artists_uri()

    if module.params.get("artists_file"):
        results = top_tracks.get_top_tracks_from_file()
    else:
        results = top_tracks.get_top_tracks()

    if output_format == 'short':
        results = top_tracks.tracks_to_list(results)

    if module.params.get("dest_file"):
        file = module.params.get("dest_file")
        with open(file, 'w') as f:
            json.dump(results, f)

    module.exit_json(changed=True, results=results)

if __name__ == '__main__':
    main()
